// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Creator   Creator?
  Editor    Editor?
}

model Creator {
  id            String      @id @default(cuid())
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?     @unique
  credentials   Credentials @relation(fields: [credentialsID], references: [id])
  credentialsID String      @unique

  videos  Video[]
  jobs    Job[]
  editors Editor[]
}

model Editor {
  id      String    @id @default(cuid())
  user    User?     @relation(fields: [userId], references: [id])
  userId  String?   @unique
  creator Creator[]
  Job     Job[]
}

model Credentials {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       String //2way normal->encrypt->decrypt
  Creator   Creator?
}

model Video {
  id            String   @id @default(cuid())
  title         String
  description   String
  url           String
  category      String
  forKids       Boolean
  thumbnail     String
  isVerified    Boolean
  tags          String[]
  formats       String
  privacyStatus String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Creator       Creator  @relation(fields: [creatorId], references: [id])
  creatorId     String
}

model Job {
  id        String   @id @default(cuid())
  title     String
  editor    Editor   @relation(fields: [editorId], references: [id])
  editorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Creator   Creator  @relation(fields: [creatorId], references: [id])
  creatorId String
}
